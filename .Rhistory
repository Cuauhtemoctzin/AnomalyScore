View(TSquery)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
View(TSquery)
dim(TSquery[[k]]$obs)
length(TSquery[[k]]$obs)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
full_series= energyframe(metype='Electricity',from= "2024-09-01",to="2024-09-07", metatable)
W2=Anomalyscore_periods_LU(full_series, startday="2024-09-01",endday="2024-09-07", knn=5,distance=distance_matrix_cort,dparams=list(k=3), center=T,scale=T  )
W2=Anomalyscore_periods_LU(full_series, startday="2024-09-01",endday="2024-09-07", knn=5,distance=distance_matrix_cort,dparams=list(k=3), standvec = c(1,2)  )
View(W2)
mod= rpart(
formula = Ascore ~ . ,
data    = W2[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(minsplit = 10, maxdepth =10,cp=0)
)
rpart.plot(mod, main="Coherence distance regression tree",roundint=FALSE)
target_tree=function(data, variables, targetdepth, maxiter ){
modzero=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(modzero$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth<=targetdepth ){
finalmod=modzero
}else{ # else start process to find a smaller tree
cpit=.0001
factor=1.01
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
if(i==maxiter ){finalmod=modtemp }
}
}
return( finalmod  )
}
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=30 )
target_tree=function(data, variables, targetdepth, maxiter ){
finalmod=NULL
modzero=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(modzero$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth<=targetdepth ){
finalmod=modzero
}else{ # else start process to find a smaller tree
cpit=.0001
factor=1.01
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
if(i==maxiter ){finalmod=modtemp }
}
}
return( finalmod  )
}
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=30 )
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=100 )
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=100 )
target_tree=function(data, variables, targetdepth, maxiter ){
finalmod=NULL
modzero=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(modzero$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth<=targetdepth ){
finalmod=modzero
}else{ # else start process to find a smaller tree
cpit=.001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
if(i==maxiter ){finalmod=modzero }
}
}
return( finalmod  )
}
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=100 )
mod= rpart(
formula = Ascore ~ . ,
data    = W2[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(minsplit = 10, maxdepth =10,cp=0)
)
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=5, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=6, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
full_series= energyframe(metype='Electricity',from= "2024-09-01",to="2024-09-21", metatable)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=5, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=200 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
# testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=10, maxiter=200 )
# rpart.plot(testtargettree, main="test tree",roundint=FALSE)
#
#
full_series= energyframe(metype='Electricity',from= "2024-09-01",to="2024-09-21", metatable)
View(full_series)
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=NULL
modzero=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(modzero$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth<=targetdepth ){
finalmod=modzero
}else{ # else start process to find a smaller tree
cpit=.001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
if(i==maxiter ){finalmod=modzero }
}
}
return( finalmod  )
}
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
full_series= energyframe(metype='Electricity',from= "2024-09-01",to="2024-09-07", metatable)
W2=Anomalyscore_periods_LU(full_series, startday="2024-09-01",endday="2024-09-07", knn=4,distance=distance_matrix_cort,dparams=list(k=3), standvec = c()  )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(modzero$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
}
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(finalmod$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
}
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=200 )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=10, maxiter=200 )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(finalmod$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.0001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
}
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=300 )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=400 )
datascores=W2
variables=c(2,5,6,7,8,9,11)
targetdepth=3
maxiter=400
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(finalmod$frame))
maxdepth= max(rpart:::tree.depth(nodes))
maxdepth>targetdepth
cpit=.0001
factor=1.1
i=1
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
depthmod<targetdepth
depthmod==targetdepth
maxdepth>targetdepth
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.0001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{
if(depthmod<targetdepth ){
factor=.999
next
}else{factor=1.1}
}
} #
}
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(finalmod$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.0001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{
if(depthmod<targetdepth ){
factor=.999
next
}else{factor=1.1}
}
} #
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=5, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=6, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
View(datascores)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
source("~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/anomalyscorebuilding.R", echo=TRUE)
testdata=energyframe(metype ="Electricity",from="2024-09-01", to="2024-09-07", metatable = metatable)
library(roxygen2)
setwd("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
library("devtools")
setwd("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
devtools::install_github("Cuauhtemoctzin/AnomalyScore")
library("AnomalyScore")
daysequence=seq(as.Date("2024-09-01"),as.Date(  "2024-09-07"),1 )
h=2
newend<-as.Date(daysequence[h])
newstart<-newend-1
sum_series<-testdata[which(testdata$time>= as.character(newstart) &testdata$time<=as.character(newend)),]
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=4, ),  standvec=c(1), metabuilding )
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=4 ),  standvec=c(1), metabuilding )
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=4 ),  standvec=c(), metabuilding )
View(TESTscorecgci)
View(TESTscorecgci$framescore)
