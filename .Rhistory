formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{
if(depthmod<targetdepth ){
factor=.999
next
}else{factor=1.1}
}
} #
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=5, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=6, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
View(datascores)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
shiny::runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
# return the given node and all its ancestors (a vector of node numbers)
# from: Plotting rpart trees with the rpart.plot package (Stephen Milborrow, 2021)
plottreenodes=function(mod, nodeindex, distaname){
if(nodeindex==0){
rpart.plot(mod, branch.lwd=5,roundint=FALSE, type=5,cex=.6)
}else{
nodeslabel = as.numeric(  row.names(mod$frame)[  which ( mod$frame$var=="<leaf>" ) ] )
nodes <- as.numeric(row.names(mod$frame))
node <- nodeslabel[nodeindex]  # 11 is our chosen node, arbitrary for this example
cols.text <- ifelse(nodes %in% path.to.root(node), "black", "gray")
cols.branch <- ifelse(nodes %in% path.to.root(node), "red", "gray")
#plotting the tree
rpart.plot(mod,col = cols.text, branch.col = cols.branch,branch.lwd=5, split.col = cols.text,roundint=FALSE, type=5,cex=.6)
}
}
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
tableclients=read.csv("/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/clients_1727499626.csv")
devices=unique(  tableclients$Device )
devices
devices_ut=strsplit(devices, "-")
devlengths= unlist(lapply(devices_ut, length))
max(devlengths)
for(i in 1:length(devices_ut)){
if(i==1){
deviceframe=  data.frame(building=devices_ut[[i]][1],wap=devices_ut[[i]][2], serve="" )
}else{
if(length(devices_ut[[i]])>=3 ){
tempdeviceframe=  data.frame(building=devices_ut[[i]][1],wap=devices_ut[[i]][2], serve= paste(devices_ut[[i]][3:length(devices_ut[[i]])],collapse = "_")  )
deviceframe=rbind( deviceframe,tempdeviceframe  )
}else{
tempdeviceframe=  data.frame(building=devices_ut[[i]][1],wap=devices_ut[[i]][2], serve=""   )
deviceframe=rbind( deviceframe,tempdeviceframe  )
}
}
}
unique( deviceframe$building  )
bcodes= unique( deviceframe$building  )
namesguess=rep("", length(bcodes))
namesguess[5]=""
namesguess[1]="Spine"
namesguess[2]="Health Innovation Campus"
namesguess[3]="Faculty of Science and Technology"
namesguess[4]="Charles Carter Building"
namesguess[5]="John Creed Building"
namesguess[6]="University House"
namesguess[7]="Bowland College"
namesguess[8]="Graduate College"
namesguess[9]="sport facilities"
namesguess[10]="County main/south"
namesguess[11]="Human Resources"
namesguess[12]="Student Housing"
namesguess[13]="Psychology"
namesguess[14]="research/reception building?"
namesguess[15]="Sociology"
namesguess[16]="Chaplaincy"
namesguess[17]="Vice-Chancellor's office"
namesguess[18]="Library"
namesguess[19]="Cybersecurity Research Centre"
namesguess[20]="Lancaster..."
namesguess[21]="Music Building"
namesguess[22]="Lonsdale College"
namesguess[23]="County College"
namesguess[24]="Confucius Institute"
namesguess[25]="Grizedale Hall"
namesguess[26]="Bailrigg campus"
namesguess[27]="Fine Arts"
namesguess[28]="Hazelrigg"
namesguess[29]="Alexandra House"
namesguess[30]="Biology"
namesguess[31]="Cartmel College"
namesguess[32]="Castle"
namesguess[33]="Bowland Hall"
myframe=data.frame(Code_device=bcodes,Guess= namesguess)
View(myframe)
namesguess[32]="Castle?"
myframe=data.frame(Code_device=bcodes,Guess= namesguess)
write.csv(myframe,"/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/codesguess.csv")
substr(tableclients$MAC.Address[1,], 1,8)
substr(tableclients$MAC.Address[1], 1,8)
devicecode= substr(tableclients$MAC.Address, 1,8)
length(unique( devicecode) )
# Define your vector of OUIs
OUIvector <- c("20:1E:88", "C4:BD:E5", "3A:A9:79", "3C:A6:F6", "C0:3C:59",
"1C:57:DC", "F6:46:D3", "C2:F8:56")
# Initialize an empty vector to store results
results <- vector("character", length(OUIvector))
# Base URL of the MAC vendor lookup site
base_url <- "https://www.macvendorlookup.com/"
i=1
# Create the URL for the specific MAC address lookup
search_url <- paste0(base_url, OUIvector[i])
# Send a GET request to the URL
response <- GET(search_url)
status_code(response)
OUIvector[i]
# Base URL of the MAC vendor lookup site
base_url <- "https://www.macvendorlookup.com/api/v2/"
# Create the URL for the specific MAC address lookup
search_url <- paste0(base_url, OUIvector[i])
# Send a GET request to the URL
response <- GET(search_url)
status_code(response)
content <- content(response, as = "text", encoding = "UTF-8")
contenttable <- fromJSON(content)
View(contenttable)
# Define your vector of OUIs
OUIvector <- tableclients$MAC.Address
# Create the URL for the specific MAC address lookup
search_url <- paste0(base_url, OUIvector[i])
# Send a GET request to the URL
response <- GET(search_url)
status_code(response)
i=2
# Create the URL for the specific MAC address lookup
search_url <- paste0(base_url, OUIvector[i])
# Send a GET request to the URL
response <- GET(search_url)
status_code(response)
content <- content(response, as = "text", encoding = "UTF-8")
contenttable <- fromJSON(content)
View(contenttable)
# Define your vector of OUIs
OUIvector <- tableclients$MAC.Address
# Base URL of the MAC vendor lookup site
base_url <- "https://www.macvendorlookup.com/api/v2/"
companyvector=rep("NF", length(tableclients$MAC.Address))
# Loop through each OUI in the vector
for (i in seq_along(OUIvector)) {
# Create the URL for the specific MAC address lookup
search_url <- paste0(base_url, OUIvector[i])
# Send a GET request to the URL
response <- GET(search_url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the HTML content
content <- content(response, as = "text", encoding = "UTF-8")
contenttable <- fromJSON(content)
companyvector[i]=contenttable$company
} else {
# If the request failed, store "NF"
companyvector[i] <- "NF"
}
}
# Display the final results
head(companyvector)
# Display the final results
unique(companyvector)
# Display the final results
table(companyvector)
# Display the final results
barplot( table(companyvector))
# Display the final results
barplot( table(companyvector),horiz = T)
# Display the final results
barplot( table(companyvector),horiz = T,axes=F)
# Display the final results
barplot( table(companyvector),horiz = T,names.arg=names,las=1)
names(companyvector)
names(table(companyvector))
# Display the final results
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar(3,4,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,4,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(7,4,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,4,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(1,4,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,4,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,2,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,5,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,7,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,10,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,20,6,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,20,3,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,20,1,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,20,0,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1)
# Display the final results
par(mar=c(3,20,0,7))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1,cex.names=.5)
dim(table(companyvector))
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1,cex.names=.1)
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1,cex.names=.4)
table=table(companyvector)
table=table[order(table)]
barplot( table(companyvector),horiz = T,names.arg=names(table(companyvector)),las=1,cex.names=.4)
barplot( table,horiz = T,names.arg=names(table(companyvector)),las=1,cex.names=.4)
table
View(table)
sum(table)
library(rvest)
library(dplyr)
# URL of the page to scrape
url <- "https://www.gadgets360.com/mobiles/all-brands"
# Read the webpage content
webpage <- read_html(url)
# Extract brand names
brand_names <- webpage %>%
html_nodes(".marginRight10") %>%  # This CSS selector targets brand name elements
html_text() %>%  # Extract the text content
trimws()  # Remove any extra whitespace
# Print the result
print(brand_names)
webpage
# Extract brand names
brand_names <- webpage %>%
html_nodes("rvw-title") %>%  # This CSS selector targets brand name elements
html_text() %>%  # Extract the text content
trimws()  # Remove any extra whitespace
# Print the result
print(brand_names)
# Extract brand names
brand_names <- webpage %>%
html_nodes(".rvw-title") %>%  # This CSS selector targets brand name elements
html_text() %>%  # Extract the text content
trimws()  # Remove any extra whitespace
# Print the result
print(brand_names)
paste(brand_names, collapse = "|")
#clean these brands
tvec= sapply(brand_names, str_detect, pattern="Mobile Phones" )
library(stringr)
#clean these brands
tvec= sapply(brand_names, str_detect, pattern="Mobile Phones" )
bnamesclean=sub("Mobile Phones.*", "", string=brand_names)
bnamesclean=sub("Mobile Phones.*", "", brand_names)
bnamesclean=sub(" Mobile Phones.*", "", brand_names)
bnamesclean
bnamesclean=bnamesclean[1:179]
bnamesclean
device_types <- sapply(companyvector, classify_device)
classify_device <- function(company_name) {
if (any(grepl(paste(bnamesclean, collapse = "|"), company_name, ignore.case = TRUE))) {
return("Mobile Device")
} else {
return("Unknown")
}
}
device_types <- sapply(companyvector, classify_device)
View(data.frame(dev=companyvector, class=device_types ))
table(device_types)
paste("mobile", collapse = "|")
classify_device <- function(company_name) {
if (any(grepl(paste("mobile", collapse = "|"), company_name, ignore.case = TRUE))) {
return("Mobile Device")
} else {
return("Unknown")
}
}
device_types <- sapply(companyvector, classify_device)
table(device_types)
classify_device <- function(company_name) {
if (any(grepl(paste(bnamesclean, collapse = "|"), company_name, ignore.case = TRUE))) {
return("Mobile Device")
} else {
return("Unknown")
}
}
device_types <- sapply(companyvector, classify_device)
table(device_types)
frameclassdevice=data.frame(dev=companyvector, class=device_types )
View(frameclassdevice[which(frameclassdevice$class=="Mobile Device"),])
View(frameclassdevice[which(frameclassdevice$class=="Unknown"),])
View(frameclassdevice[which(frameclassdevice$class=="Unknown" & frameclassdevice$dev!="NF" ),])
frameclassdevice$class[which(frameclassdevice$class=="Unknown" & frameclassdevice$dev!="NF" ),]="Infrastructure"
frameclassdevice$class[which(frameclassdevice$class=="Unknown" & frameclassdevice$dev!="NF" )]="Infrastructure"
table(frameclassdevice$class)
View(frameclassdevice)
shiny::runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
tableclients=read.csv("/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/clients_1727499626.csv")
devicecode= substr(tableclients$MAC.Address, 1,8)
devices_ut=strsplit(devices, "-")
devices=unique(  tableclients$Device )
devicecode= substr(tableclients$MAC.Address, 1,8)
devices_ut=strsplit(devices, "-")
devlengths= unlist(lapply(devices_ut, length))
for(i in 1:length(devices_ut)){
if(i==1){
deviceframe=  data.frame(building=devices_ut[[i]][1],wap=devices_ut[[i]][2], serve="" )
}else{
if(length(devices_ut[[i]])>=3 ){
tempdeviceframe=  data.frame(building=devices_ut[[i]][1],wap=devices_ut[[i]][2], serve= paste(devices_ut[[i]][3:length(devices_ut[[i]])],collapse = "_")  )
deviceframe=rbind( deviceframe,tempdeviceframe  )
}else{
tempdeviceframe=  data.frame(building=devices_ut[[i]][1],wap=devices_ut[[i]][2], serve=""   )
deviceframe=rbind( deviceframe,tempdeviceframe  )
}
}
}
bcodes= unique( deviceframe$building  )
namesguess=rep("", length(bcodes))
namesguess[1]="Spine"
namesguess[2]="Health Innovation Campus"
namesguess[3]="Faculty of Science and Technology"
namesguess[4]="Charles Carter Building"
namesguess[5]="John Creed Building"
namesguess[6]="University House"
namesguess[7]="Bowland College"
namesguess[8]="Graduate College"
namesguess[9]="sport facilities"
namesguess[10]="County main/south"
namesguess[11]="Human Resources"
namesguess[12]="Student Housing"
namesguess[13]="Psychology"
namesguess[14]="research/reception building?"
namesguess[15]="Sociology"
namesguess[16]="Chaplaincy"
namesguess[17]="Vice-Chancellor's office"
namesguess[18]="Library"
namesguess[19]="Cybersecurity Research Centre"
namesguess[20]="Lancaster..."
namesguess[21]="Music Building"
namesguess[22]="Lonsdale College"
namesguess[23]="County College"
namesguess[24]="Confucius Institute"
namesguess[25]="Grizedale Hall"
namesguess[26]="Bailrigg campus"
namesguess[27]="Fine Arts"
namesguess[28]="Hazelrigg"
namesguess[29]="Alexandra House"
namesguess[30]="Biology"
namesguess[31]="Cartmel College"
namesguess[32]="Castle?"
namesguess[33]="Bowland Hall"
myframe=data.frame(Code_device=bcodes,Guess= namesguess)
abrbds= unique( deviceframe$building  )
library(rvest)
library(httr)
# Define your vector of OUIs
OUIvector <- tableclients$MAC.Address
# Base URL of the MAC vendor lookup site
base_url <- "https://www.macvendorlookup.com/api/v2/"
companyvector=rep("NF", length(tableclients$MAC.Address))
# Loop through each OUI in the vector
for (i in seq_along(OUIvector)) {
# Create the URL for the specific MAC address lookup
search_url <- paste0(base_url, OUIvector[i])
# Send a GET request to the URL
response <- GET(search_url)
# Check if the request was successful
if (status_code(response) == 200) {
# Parse the HTML content
content <- content(response, as = "text", encoding = "UTF-8")
contenttable <- fromJSON(content)
companyvector[i]=contenttable$company
} else {
# If the request failed, store "NF"
companyvector[i] <- "NF"
}
}
names(table(companyvector))
library(rvest)
library(dplyr)
# URL of the page to scrape
url <- "https://www.gadgets360.com/mobiles/all-brands"
# Read the webpage content
webpage <- read_html(url)
# Extract brand names
brand_names <- webpage %>%
html_nodes(".rvw-title") %>%  # This CSS selector was "class" in html
html_text() %>%  # Extract the text content
trimws()  # Remove any extra whitespace
# Print the result
print(brand_names)
#clean these brands
#tvec= sapply(brand_names, str_detect, pattern="Mobile Phones" )
bnamesclean=sub(" Mobile Phones.*", "", brand_names)
bnamesclean=bnamesclean[1:179]
bnamesclean
library(stringr)
classify_device <- function(company_name) {
if (any(grepl(paste(bnamesclean, collapse = "|"), company_name, ignore.case = TRUE))) {
return("Mobile Device")
} else {
return("Unknown")
}
}
device_types <- sapply(companyvector, classify_device)
frameclassdevice=data.frame(dev=companyvector, class=device_types )
frameclassdevice$class[which(frameclassdevice$class=="Unknown" & frameclassdevice$dev!="NF" )]="Infrastructure"
table(frameclassdevice$class)
library("devtools")
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build_manual("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
library(dplyr)       # data wrangling
library(httr)
library(jsonlite)
library(DT)
library(AnomalyScore)
library(lubridate)
library(ggplot2)
library(plotly)
library(rsample)     # data splitting
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
testdata=energyframe(metype ="Electricity",from="2024-08-01", to="2024-08-31", metatable = metatable)
library("devtools")
library(roxygen2)
setwd("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
devtools::install_github("Cuauhtemoctzin/AnomalyScore")
library("AnomalyScore")
library("AnomalyScore")
