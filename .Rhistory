target_tree=function(data, variables, targetdepth, maxiter ){
finalmod=NULL
modzero=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(modzero$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth<=targetdepth ){
finalmod=modzero
}else{ # else start process to find a smaller tree
cpit=.001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
if(i==maxiter ){finalmod=modzero }
}
}
return( finalmod  )
}
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=100 )
mod= rpart(
formula = Ascore ~ . ,
data    = W2[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(minsplit = 10, maxdepth =10,cp=0)
)
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=5, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=6, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
full_series= energyframe(metype='Electricity',from= "2024-09-01",to="2024-09-21", metatable)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=5, maxiter=100 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=200 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
# testtargettree=target_tree(data=full_series, variables=c(2,5,6,7,8,9,11), targetdepth=10, maxiter=200 )
# rpart.plot(testtargettree, main="test tree",roundint=FALSE)
#
#
full_series= energyframe(metype='Electricity',from= "2024-09-01",to="2024-09-21", metatable)
View(full_series)
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=NULL
modzero=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(modzero$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth<=targetdepth ){
finalmod=modzero
}else{ # else start process to find a smaller tree
cpit=.001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = W2[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
if(i==maxiter ){finalmod=modzero }
}
}
return( finalmod  )
}
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
full_series= energyframe(metype='Electricity',from= "2024-09-01",to="2024-09-07", metatable)
W2=Anomalyscore_periods_LU(full_series, startday="2024-09-01",endday="2024-09-07", knn=4,distance=distance_matrix_cort,dparams=list(k=3), standvec = c()  )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(modzero$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
}
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(finalmod$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
}
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=200 )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=10, maxiter=200 )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(finalmod$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.0001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod<targetdepth ){
factor=.999
next
}else{
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{ #case when depthmod>targetdepth
next
}
}
}
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=200 )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=300 )
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=400 )
datascores=W2
variables=c(2,5,6,7,8,9,11)
targetdepth=3
maxiter=400
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(finalmod$frame))
maxdepth= max(rpart:::tree.depth(nodes))
maxdepth>targetdepth
cpit=.0001
factor=1.1
i=1
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
depthmod<targetdepth
depthmod==targetdepth
maxdepth>targetdepth
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.0001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{
if(depthmod<targetdepth ){
factor=.999
next
}else{factor=1.1}
}
} #
}
target_tree=function(datascores, variables, targetdepth, maxiter ){
finalmod=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=0)
)
nodes <- as.numeric(rownames(finalmod$frame))
maxdepth= max(rpart:::tree.depth(nodes))
if(maxdepth>targetdepth ){ # start the process to find a smaller tree
cpit=.0001
factor=1.1
for(i in 1:maxiter){
cpit=cpit*factor
modtemp=rpart(
formula = Ascore ~ . ,
data    = datascores[,variables],
method  = "anova",
control = list(cp=cpit)
)
nodes <- as.numeric(rownames(modtemp$frame))
depthmod= max(rpart:::tree.depth(nodes))
if(depthmod==targetdepth){
finalmod=modtemp
break
}else{
if(depthmod<targetdepth ){
factor=.999
next
}else{factor=1.1}
}
} #
}
return( finalmod  )
}
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=3, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=2, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=1, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=5, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=6, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
testtargettree=target_tree(data=W2, variables=c(2,5,6,7,8,9,11), targetdepth=4, maxiter=400 )
rpart.plot(testtargettree, main="test tree",roundint=FALSE)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
View(datascores)
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/appLUtree.R')
shiny::runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
testdata=energyframe(metype ="Electricity",from="2024-09-01", to="2024-09-07", metatable = metatable)
#
# TESTscore= Anomaly_score_LUbuilding(sum_series=testdata,knn=4, distance=distance_matrix_banddepth,dparams=list(), standvec=c(1,2), metabuilding )
#
TESTscore=Anomalyscore_periods_LU(full_series=testdata, startday="2024-09-01",endday="2024-09-07", knn=4,distance=distance_matrix_cort,dparams=list(k=3),  standvec=c() )
mymod=rpart( # initial tree
formula = Ascore ~ . ,
data    = TESTscore[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(cp=0.00000000000000001)
)
highlightplot(optimal_tree=mymod,unit_train=TESTscore,fulldata=testdata ,node=1,datestart="2024-09-01",dateend="2024-09-07",standvec=c(1,2))
highlightplot= function(optimal_tree,unit_train,fulldata ,node,datestart,dateend,standvec){
standvec= as.numeric(standvec)
lstand=length(standvec)
cs_true=c(T,T)
cs_default=c(F,F)
if(lstand>0){cs_default[standvec]=cs_true[standvec] }
startday<-paste0(datestart, " 00:00:00")
endday<-paste0(dateend, " 23:59:59" )
if(node==0){
Bdhs<- as.character( unique(unit_train$building_name ) )
codesbuilding<- unique(unit_train$building )
for(i in 1:length(Bdhs) ){
ts_hs<-fulldata[which(fulldata$time>= startday &fulldata$time<=endday) , c(1, findbuildings(   names(fulldata) ,codesbuilding[i] )  )]
names(ts_hs)[2]<-"Power"
ts_hs$day_hour<- paste0(yday(ts_hs$time),"_", hour(ts_hs$time))
ts_hs<-ts_hs[,-c(1)]%>% group_by(day_hour) %>% summarise(across(everything(), \(x) sum(x, na.rm = TRUE) ) )
ts_hs$Building<-Bdhs[i]
ts_hs$Power<-scale(ts_hs$Power, center = cs_default[2], scale = cs_default[1]) # set center and scale according to inputs
if(i==1 ){
sumframe<-ts_hs
}else{
sumframe<-rbind(sumframe,ts_hs)
}
}
#formating for ggplot
dayh<-strsplit( sumframe$day_hour,"_" )
sumdays<- unlist(dayh)[seq(1,(2*dim(sumframe)[1]-1), by=2 ) ]
sumhours<-unlist(dayh)[seq(2,(2*dim(sumframe)[1]), by=2 ) ]
date_sum<-  as.Date( paste0(year(startday),"-01-01" ) )+ as.numeric(sumdays) -1
sumframe$time<-as.POSIXct( paste0(date_sum, " ",sumhours ), format="%Y-%m-%d %H" )
sumframe<-sumframe[order(sumframe$time),]
names(sumframe)[2]<-"Power"
#visualization
ggplot(sumframe, aes(x = time, y = Power)) +
geom_line(aes(color = Building))+
scale_x_datetime(
#breaks = scales::date_breaks("1 day"),           # Major breaks at start of each day
date_breaks="1 day",
#   minor_breaks = scales::date_breaks("1 hour"),    # Minor breaks for every hour
date_minor_breaks="1 hour",
labels =scales::date_format("%b %d")               # Show day name
) +
theme(panel.background = element_rect(fill='transparent'),
axis.minor.ticks.length.x.bottom = unit(2, "pt"),
axis.minor.ticks.x.bottom  = element_line(color = "red"),  # Red color for minor ticks
plot.background = element_rect(fill='transparent', color=NA),legend.position="none",
axis.title.y.left=element_blank(),
axis.text.x=element_text(angle = 45)
)
}else{
wherenodes<- unique(  optimal_tree$where )
wherenodes=wherenodes[order(wherenodes)]
indlocmaxleaf<- which(optimal_tree$where== wherenodes[node]    ) # max(optimal_tree$where) as.numeric(input$node)
high_scores<- unit_train[indlocmaxleaf,]
Bdhs<- as.character( unique(high_scores$building_name ) )
codesbuilding<- unique(high_scores$building )
#selection of days and buildings from the main data set
for(i in 1:length(Bdhs) ){
ts_hs<-fulldata[which(fulldata$time>= startday &fulldata$time<=endday) , c(1, findbuildings(   names(fulldata) ,codesbuilding[i] )  )]
filterhs<- high_scores[which(high_scores$building_name==Bdhs[i]  ),]
ts_hs$highlight<-ifelse(as.Date( ts_hs$time) %in%  filterhs$date ,1,0  )
names(ts_hs)[2]<-"Power"
ts_hs$day_hour<- paste0(yday(ts_hs$time),"_", hour(ts_hs$time))
ts_hs<-ts_hs[,-c(1)]%>% group_by(day_hour) %>% summarise(across(everything(), \(x) sum(x, na.rm = TRUE) ) )
ts_hs$Building<-Bdhs[i]
ts_hs$Power<-scale(ts_hs$Power, center = cs_default[2], scale = cs_default[1]) # set center and scale according to inputs
if(i==1 ){
sumframe<-ts_hs
}else{
sumframe<-rbind(sumframe,ts_hs)
}
}
#formating for ggplot
dayh<-strsplit( sumframe$day_hour,"_" )
sumdays<- unlist(dayh)[seq(1,(2*dim(sumframe)[1]-1), by=2 ) ]
sumhours<-unlist(dayh)[seq(2,(2*dim(sumframe)[1]), by=2 ) ]
date_sum<-  as.Date( paste0(year(startday),"-01-01" ) )+ as.numeric(sumdays) -1
sumframe$time<-as.POSIXct( paste0(date_sum, " ",sumhours ), format="%Y-%m-%d %H" )
sumframe<-sumframe[order(sumframe$time),]
# Visualization
ggplot(sumframe, aes(x = time, y = Power)) +
geom_line(aes(color = Building))+
scale_x_datetime(
#breaks = scales::date_breaks("1 day"),           # Major breaks at start of each day
date_breaks="1 day",
#   minor_breaks = scales::date_breaks("1 hour"),    # Minor breaks for every hour
date_minor_breaks="2 hour",
labels = scales::date_format("%b %d")               # Show day name
) +
theme(panel.background = element_rect(fill='transparent'),
axis.minor.ticks.length.x.bottom = unit(2, "pt"),
axis.minor.ticks.x.bottom  = element_line(color = "red"),  # Red color for minor ticks
plot.background = element_rect(fill='transparent', color=NA),legend.position="bottom",
axis.title.y.left=element_blank(),
axis.text.x=element_text(angle = 45)
)
}
}
highlightplot(optimal_tree=mymod,unit_train=TESTscore,fulldata=testdata ,node=1,datestart="2024-09-01",dateend="2024-09-07",standvec=c(1,2))
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
TESTscore=Anomalyscore_periods_LU(full_series=testdata, startday="2024-09-01",endday="2024-09-07", knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=10),  standvec=c(1) )
daysequence=seq(as.Date("2024-09-01"),as.Date(  "2024-09-07"),1 )
h=2
newend<-as.Date(daysequence[h])
newstart<-newend-1
sum_series<-testdata[which(testdata$time>= as.character(newstart) &testdata$time<=as.character(newend)),]
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=10),  standvec=c(1), metabuilding )
library("devtools")
devtools::install_github("Cuauhtemoctzin/AnomalyScore")
Sys.getenv("GITHUB_PAT")
usethis::edit_r_environ()
gitcreds::gitcreds_delete()
devtools::install_github("Cuauhtemoctzin/AnomalyScore")
library("AnomalyScore")
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=10),  standvec=c(1), metabuilding )
library(MASS)
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=10),  standvec=c(1), metabuilding )
library(roxygen2)
setwd("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=3),  standvec=c(1), metabuilding )
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=1),  standvec=c(1), metabuilding )
TESTscorecgci=Anomaly_score_LUbuilding(sum_series,knn=4,distance=distance_matrix_CGCI,dparams=list(pmax=4),  standvec=c(1), metabuilding )
