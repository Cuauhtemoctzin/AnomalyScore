'PDC',
'CGCI',
'RGPDC',
'PMIME',
'mvLWS',
'BD'
)
functions=list(
distance_matrix_cort,
distance_matrix_wasserstein,
distance_matrix_mahalanobis,
distance_matrix_cortNorm,
distance_matrix_coherence,
distance_matrix_PDC,
distance_matrix_CGCI,
distance_matrix_RGPDC,
distance_matrix_PMIME,
distance_matrix_mvLWS,
distance_matrix_banddepth
)
unit=as.matrix(unit)
myncols<-ncol(unit)
if(is.null(colnames(unit)) ){
unitnames<-paste0("Series_",1:myncols   )
}else{
unitnames=colnames(unit)
}
frame_scores= data.frame(series=unitnames)
for(i in 1:length( measures) ){
distance=functions[[measures[i] ]]
mydparams=dparams[[ measures[i] ]]
mydparams$unit=unit
AScat1=kneighbors_distance_docall(knn, distance, mydparams )
frame_scores$score= AScat1$anomalyscore
names(frame_scores)[(i+1)]=dist_names[measures[ i]]
}
#rank is ordered with respect to the first measure
frame_scores=frame_scores[order(frame_scores[,2], decreasing = T),]
frame_scores$Rank= length( frame_scores$series):1
return(frame_scores)
}
unit=matrix( rnorm(500), ncol=5  )
measures= c(1,5,11 ) # Cort, Coherence and Band depth
knn=3
dparams=list(
list(k=2),
list( span1=2, span2=2, period = 5),
list( )
)
Anomalyscoresframe(unit, knn,measures, dparams)
#' @export
#' @examples
#' X=matrix( rnorm(500), ncol=5  )
#' measures= c(1,5,11 ) # Cort, Coherence and Band depth
#' dparams=list(
#' list(k=2),
#' list( span1=2, span2=2, period = 5)
#' list( )
#' )
#' Anomalyscoresframe(unit, knn,measures, dparams)
Anomalyscoresframe=function(unit, knn,measures, dparams){
dist_names<-c(
'Cort',
'WS',
'MH',
'CortN',
'Coh',
'PDC',
'CGCI',
'RGPDC',
'PMIME',
'mvLWS',
'BD'
)
functions=list(
distance_matrix_cort,
distance_matrix_wasserstein,
distance_matrix_mahalanobis,
distance_matrix_cortNorm,
distance_matrix_coherence,
distance_matrix_PDC,
distance_matrix_CGCI,
distance_matrix_RGPDC,
distance_matrix_PMIME,
distance_matrix_mvLWS,
distance_matrix_banddepth
)
unit=as.matrix(unit)
myncols<-ncol(unit)
if(is.null(colnames(unit)) ){
unitnames<-paste0("Series_",1:myncols   )
}else{
unitnames=colnames(unit)
}
frame_scores= data.frame(series=unitnames)
for(i in 1:length( measures) ){
distance=functions[[measures[i] ]]
mydparams=dparams[[ i ]]
mydparams$unit=unit
AScat1=kneighbors_distance_docall(knn, distance, mydparams )
frame_scores$score= AScat1$anomalyscore
names(frame_scores)[(i+1)]=dist_names[measures[ i]]
}
#rank is ordered with respect to the first measure
frame_scores=frame_scores[order(frame_scores[,2], decreasing = T),]
frame_scores$Rank= length( frame_scores$series):1
return(frame_scores)
}
unit=matrix( rnorm(500), ncol=5  )
measures= c(1,5,11 ) # Cort, Coherence and Band depth
knn=3
dparams=list(
list(k=2),
list( span1=2, span2=2, period = 5),
list( )
)
Anomalyscoresframe(unit, knn,measures, dparams)
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
library(devtools )
setwd("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build_manual("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build_manual("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build_manual("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
rm(list = c("Anomalyscoresframe"))
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
library(devtools )
setwd("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build_manual("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build_manual("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build_manual("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
library(devtools )
setwd("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
document()
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
document()
devtools::build( "/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore" )
devtools::build_manual("/Users/guillermocgg/Dropbox/Lancaster/MyWork/Rpackage/AnomalyScore")
axis.ticks.length = unit(10, "pt"),
install.packages("AnomalyScore")
install.packages("AnomalyScore")
shiny::runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
testdata=energyframe(metype ="Electricity",from="2024-08-01", to="2024-08-4", metatable = metatable)
#TESTscore= Anomaly_score_LUbuilding(sum_series=testdata,knn=4, distance=distance_matrix_banddepth,dparams=list(), standvec=c(1,2), metabuilding )
TESTscore=Anomalyscore_periods_LU(full_series=testdata, startday="2024-08-01",endday="2024-08-04", knn=4,distance=distance_matrix_cort,dparams=list(k=3),  standvec=c() )
mymod=rpart( # initial tree
formula = Ascore ~ . ,
data    = TESTscore[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(cp=0.00000000000000001)
)
nodes <- as.numeric(rownames(mymod$frame))
nodes
rpart:::tree.depth(nodes)
mymod$ordered
#get the risk levels (ordering by mean value)
wherenodes<- unique(  mymod$where )
wherenodes
wherenodes=wherenodes[order(wherenodes)]
wherenodes
rpart.plot(mymod)
i=1
indlocmaxleaf<- which(mymod$where== wherenodes[i]    ) # max(optimal_tree$where) as.numeric(input$node)
selected_scores<- TESTscore[indlocmaxleaf,]
mean(selected_scores$Ascore)
mval[i]= mean(selected_scores$Ascore)
#mean values
mval=c()
for(i in 1:length(wherenodes)){
indlocmaxleaf<- which(mymod$where== wherenodes[i]    ) # max(optimal_tree$where) as.numeric(input$node)
selected_scores<- TESTscore[indlocmaxleaf,]
mval[i]= mean(selected_scores$Ascore)
}
mval
data.frame(index=1:length(wherenodes),nodeval=wherenodes, mval=mval )
indexframe= data.frame(index=1:length(wherenodes),nodeval=wherenodes, mval=mval )
indexframe=indexframe[order(indexframe$mval),]
indexframe
# list creation
listindex= List('All'=0)
# list creation
listindex= list('All'=0)
# list creation
listindex= list(indexframe$index)
View(listindex)
# list creation
listindex= as.list(indexframe$index)
# list creation
listindex= as.list(c(0, indexframe$index) )
indexframe=indexframe[order(indexframe$mval, decreasing = T),]
indexframe
# list creation
listindex= as.list(c(0, indexframe$index) )
labesrisk=c("All",paste0("RL ",length(wherenodes):1 ) )
labelsrisk=c("All",paste0("RL ",length(wherenodes):1 ) )
names(listindex)=labelsrisk
risklevels<-function(tree){
wherenodes<- unique(  tree$where )
wherenodes=wherenodes[order(wherenodes)] # terminal nodes
#mean values
mval=c()
for(i in 1:length(wherenodes)){
indlocmaxleaf<- which(tree$where== wherenodes[i]    ) # max(optimal_tree$where) as.numeric(input$node)
selected_scores<- TESTscore[indlocmaxleaf,]
mval[i]= mean(selected_scores$Ascore)
}
indexframe= data.frame(index=1:length(wherenodes),nodeval=wherenodes, mval=mval )
indexframe=indexframe[order(indexframe$mval, decreasing = T),]
# RL  list creation
listindex= as.list(c(0, indexframe$index) )
#vector of risk level labels
labelsrisk=c("All",paste0("RL ",length(wherenodes):1 ) )
names(listindex)=labelsrisk
return(labelsrisk)
}
risklevels(mymod)
#get the risk levels (ordering by mean value)
# my mod is the regression tree as an rpart object
risklevels<-function(tree){
wherenodes<- unique(  tree$where )
wherenodes=wherenodes[order(wherenodes)] # terminal nodes
#mean values
mval=c()
for(i in 1:length(wherenodes)){
indlocmaxleaf<- which(tree$where== wherenodes[i]    ) # max(optimal_tree$where) as.numeric(input$node)
selected_scores<- TESTscore[indlocmaxleaf,]
mval[i]= mean(selected_scores$Ascore)
}
indexframe= data.frame(index=1:length(wherenodes),nodeval=wherenodes, mval=mval )
indexframe=indexframe[order(indexframe$mval, decreasing = T),]
# RL  list creation
listindex= as.list(c(0, indexframe$index) )
#vector of risk level labels
labelsrisk=c("All",paste0("RL ",length(wherenodes):1 ) )
names(listindex)=labelsrisk
return(listindex)
}
risklevels(mymod)
mymod=rpart( # initial tree
formula = Ascore ~ . ,
data    = TESTscore[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(cp=0.1)
)
rpart(mymod)
mymod=rpart( # initial tree
formula = Ascore ~ . ,
data    = TESTscore[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(cp=0.1)
)
rpart.plot(mymod)
risklevels(mymod)
mymod=rpart( # initial tree
formula = Ascore ~ . ,
data    = TESTscore[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(cp=0.0001)
)
rpart.plot(mymod)
mymod=rpart( # initial tree
formula = Ascore ~ . ,
data    = TESTscore[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(cp=0.0000001)
)
rpart.plot(mymod)
mymod=rpart( # initial tree
formula = Ascore ~ . ,
data    = TESTscore[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(cp=0.0)
)
rpart.plot(mymod)
risklevels(mymod)
mymod=rpart( # initial tree
formula = Ascore ~ . ,
data    = TESTscore[,c(2,5,6,7,8,9,11)],
method  = "anova",
control = list(cp=10)
)
rpart.plot(mymod)
risklevels(mymod)
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool/apptemp.R')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
runApp('~/Library/CloudStorage/Dropbox/Lancaster/MyWork/shinnyapp/anomaly_tree_LU_tool')
tableclients=read.csv("/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/clients_1727499626.csv")
head(tableclients)
class( tableclients$Connect.Time) = = c('POSIXt','POSIXct')
class( tableclients$Connect.Time) = c('POSIXt','POSIXct')
tableclients=read.csv("/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/clients_1727499626.csv")
tableclients=read.csv("/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/clients_1727499626.csv")
tableclients$Connect.Time[1]
class( tableclients$Connect.Time) = c('POSIXct')
tableclients$Connect.Time[1:3]
tableclients=read.csv("/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/clients_1727499626.csv")
as.POSIXlt(tableclients$Connect.Time[1:3], tz = "BST",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
as.POSIXlt(tableclients$Connect.Time[1:3])
as.POSIXlt(tableclients$Connect.Time[1:3], tz = "DST",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
as.POSIXlt(tableclients$Connect.Time[1:3], tz = "GMT+1",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
as.POSIXlt(tableclients$Connect.Time[1:3], tz = "GMT",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
as.POSIXlt(tableclients$Connect.Time[1:3], tz = "Etc/GMT+1",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
as.POSIXlt(tableclients$Connect.Time[1:3], tz = "Etc/GMT-1",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
View(tableclients)
tableclients$Connect.Time= as.POSIXlt(tableclients$Connect.Time, tz = "Etc/GMT-1",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
min( tableclients$Connect.Time )
max( tableclients$Connect.Time )
list.files(path = "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024")
minvec=c()
maxvec=c()
for(i in 1:length(filesclients)){
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
tableclients$Connect.Time= as.POSIXlt(tableclients$Connect.Time, tz = "Etc/GMT-1",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
minvec[i]=  min( tableclients$Connect.Time )
maxvec[i]=max( tableclients$Connect.Time )
}
filesclients= list.files(path = "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024")
minvec=c()
maxvec=c()
for(i in 1:length(filesclients)){
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
tableclients$Connect.Time= as.POSIXlt(tableclients$Connect.Time, tz = "Etc/GMT-1",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
minvec[i]=  min( tableclients$Connect.Time )
maxvec[i]=max( tableclients$Connect.Time )
}
head(tableclients$Connect.Time)
tableclients$Connect.Time[1]
tz= substring(tableclients$Connect.Time[1], 18)
tz= substring(tableclients$Connect.Time[1], 19)
tz=c()
tableclients$Connect.Time= as.POSIXlt(tableclients$Connect.Time, tz = "UTC",
tryFormats = c("%m/%d/%Y %H:%M %p BST"),
optional = FALSE)
paste0( "%m/%d/%Y %H:%M %p ",tzabr )
tzabr= substring(tableclients$Connect.Time[1], 19)
tableclients$Connect.Time= as.POSIXlt(tableclients$Connect.Time, tz = "UTC",
tryFormats = c(paste0( "%m/%d/%Y %H:%M %p ",tzabr ) ),
optional = FALSE)
i=3
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
tzabr= substring(tableclients$Connect.Time[1], 19)
tzabr
i=4
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
tzabr= substring(tableclients$Connect.Time[1], 19)
i=3
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
tzabr= substring(tableclients$Connect.Time[1], 19)
length( tableclients$Connect.Time[1] )
nchar( tableclients$Connect.Time[1] )
i=4
nchar( tableclients$Connect.Time[1] )
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
nchar( tableclients$Connect.Time[1] )
i=4
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
lstr= nchar( tableclients$Connect.Time[1] )
tzabr= substring(tableclients$Connect.Time[1], lstr-3)
tzabr= substring(tableclients$Connect.Time[1], lstr-2 )
i=3
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
lstr= nchar( tableclients$Connect.Time[1] )
tzabr= substring(tableclients$Connect.Time[1], lstr-2 )
i=2
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
lstr= nchar( tableclients$Connect.Time[1] )
tzabr= substring(tableclients$Connect.Time[1], lstr-2 )
i=5
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
lstr= nchar( tableclients$Connect.Time[1] )
tzabr= substring(tableclients$Connect.Time[1], lstr-2 )
minvec=c()
maxvec=c()
tz=c()
for(i in 1:length(filesclients)){
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
lstr= nchar( tableclients$Connect.Time[1] )
tzabr= substring(tableclients$Connect.Time[1], lstr-2 )
if( tzabr=="BST"){tz="Etc/GMT-1"}else{tz=tzabr}
tableclients$Connect.Time= as.POSIXlt(tableclients$Connect.Time, tz = tz,
tryFormats = c(paste0( "%m/%d/%Y %H:%M %p ",tzabr ) ),
optional = FALSE)
minvec[i]=  min( tableclients$Connect.Time )
maxvec[i]=max( tableclients$Connect.Time )
}
warnings()
min( tableclients$Connect.Time )
length(filesclients)
View(maxvec)
minvec=c()
maxvec=c()
tz=c()
i=1
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
lstr= nchar( tableclients$Connect.Time[1] )
tzabr= substring(tableclients$Connect.Time[1], lstr-2 )
if( tzabr=="BST"){tz="Etc/GMT-1"}else{tz=tzabr}
tableclients$Connect.Time= as.POSIXlt(tableclients$Connect.Time, tz = tz,
tryFormats = c(paste0( "%m/%d/%Y %H:%M %p ",tzabr ) ),
optional = FALSE)
minvec[i]=  min( tableclients$Connect.Time )
min( tableclients$Connect.Time )
minvec=list()
maxvec=list()
minvec[[i]]=  min( tableclients$Connect.Time )
maxvec[[i]]=max( tableclients$Connect.Time )
minvec=list()
maxvec=list()
for(i in 1:length(filesclients)){
tableclients=read.csv(paste0( "/Users/guillermocgg/Library/CloudStorage/Dropbox/Lancaster/MyWork/data_analysis/LancasterU/practicebriefs/wifiassociations/OneDrive_1_10-22-2024/",filesclients[i]   ) )
lstr= nchar( tableclients$Connect.Time[1] )
tzabr= substring(tableclients$Connect.Time[1], lstr-2 )
if( tzabr=="BST"){tz="Etc/GMT-1"}else{tz=tzabr}
tableclients$Connect.Time= as.POSIXlt(tableclients$Connect.Time, tz = tz,
tryFormats = c(paste0( "%m/%d/%Y %H:%M %p ",tzabr ) ),
optional = FALSE)
minvec[[i]]=  min( tableclients$Connect.Time )
maxvec[[i]]=max( tableclients$Connect.Time )
}
min (unlist(minvec ) )
max (unlist(maxvec ) )
unlist(minvec )
as.vector(minvec )
c(minvec )
minvec
minvec[[i]]
unlist(minvec, use.names=FALSE)
purrr::flatten_dbl(minvec)
Reduce(min, minvec)
Reduce(max, maxvec)
